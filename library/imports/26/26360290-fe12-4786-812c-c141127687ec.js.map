{"version":3,"sources":["../../../../../assets/Script/ElectricEffect/assets/Script/ElectricEffect/ElectricNode.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../assets/Script/ElectricEffect","sourcesContent":["import ElectricFlow from \"./ElectricFlow\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ElectricNode extends cc.Component {\n\n    //#region Properties\n\n    position: cc.Vec2 = null;\n    fiducialPoint: cc.Vec2 = null;\n    radius = 0;\n    velocity: cc.Vec2 = null;\n    speedFactor = 1;\n    belongToFlow: ElectricFlow = null;\n\n    //#endregion\n\n    //#region Initialization\n\n    init(p: cc.Vec2, r: number, sf: number){\n        this.position = p;\n        this.fiducialPoint = p;\n        this.radius = r;\n        this.speedFactor = sf;\n\n        this.reset();\n    }\n\n    //#endregion\n\n    //#region update\n\n    doUpdate (dt) {\n        // if (this.movementX < this.targetX && this.movementY < this.targetY && this.movementTime < this.movementDuration) {\n        if (this.movementTime < this.movementDuration) {\n            let fraction = dt/this.movementDuration;\n            let deltaX = this.velocity.x * fraction;\n            let deltaY = this.velocity.y * fraction;\n            this.position = new cc.Vec2(this.position.x + deltaX, this.position.y + deltaY);\n\n            this.movementTime += dt;\n        }\n        else{\n            this.reset();\n        }\n    }\n\n    //#endregion\n\n    //#region movement\n\n    velocityMin = 1.0;\n    movementTime = 0;\n    movementDuration = 0;\n    targetX = 0;\n    targetY = 0;\n    // movementX = 0;\n    // movementY = 0;\n\n    reset(){\n        // reset position\n        this.position = this.fiducialPoint;\n\n        // random angle\n        let radian = cc.randomMinus1To1() * Math.PI;\n\n        // target point\n        this.targetX = this.radius * Math.cos(radian);\n        this.targetY = this.radius * Math.sin(radian);\n\n        // velocity\n        let speedToDistance = (cc.random0To1() + this.velocityMin) * this.speedFactor;\n        let velocityX = speedToDistance * this.targetX;\n        let velocityY = speedToDistance * this.targetY;\n        this.velocity = new cc.Vec2(velocityX, velocityY);\n\n        //duration\n        this.movementDuration = 1 / speedToDistance;\n        this.movementTime = 0;\n    }\n\n    //#endregion\n\n}\n"]}