{"version":3,"sources":["../../../../../assets/Script/ElectricEffect/assets/Script/ElectricEffect/ElectricFlow.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../assets/Script/ElectricEffect","sourcesContent":["import ElectricNode from \"./ElectricNode\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ElectricFlow extends cc.Component {\n\n    //#region Properties\n\n    // @property(cc.SpriteFrame)\n    Texture: cc.SpriteFrame = null;\n\n    ContainerNode: cc.Node = null;\n\n    segments = 10;// defines how many dots(sprites) are generated between two electric nodes\n    lifeSpan = 0.05;// LifeSpan controls the frequency of the texture switching\n    age = 0; // count for lifeSpan\n    speedFactor = 1.5;\n    // originalSpriteWidth = 0;\n    currentSpriteScale = 1;\n    sprites: Array<cc.Sprite> = new Array<cc.Sprite>();\n    eNodes: Array<ElectricNode> = new Array<ElectricNode>();\n\n    //#endregion\n\n    //#region Lifecycle\n\n    // onLoad () {}\n\n    /// xxx test\n    addTestNode(){\n        //this.clear();\n        for (let index = 0; index < 10; index++) {\n            let pos = new cc.Vec2(cc.random0To1() * 30 + 240, cc.random0To1() * 30 + 70 * index);\n            let radius = Math.abs(Math.abs(index - 5) - 5) * 7;\n            this.AddElectricNode(pos, radius);\n        }\n    }\n\n    // update (dt) {}\n    doUpdate (dt) {\n        if (this.eNodes.length == 0) {\n            return;\n        }\n        \n        for (let enode of this.eNodes)\n        {\n            if (enode.belongToFlow = this) {\n                enode.doUpdate(dt);\n            }\n        }\n\n        this.drawCatmullRomCurve();\n\n        if (this.age < this.lifeSpan)\n        {\n            this.age += dt;\n        }\n        else\n        {\n            this.reset()\n        }\n    }\n\n    //#endregion\n    \n    Init(texture: cc.SpriteFrame, container: cc.Node){\n        this.Texture = texture;\n        this.ContainerNode = container;\n    }\n\n    reset(){\n        this.age = 0;\n        this.setRandomSize();\n        this.lifeSpan = cc.random0To1() * 0.05 + 0.01;\n    }\n\n    setRandomSize(){\n        // this.currentSpriteWidth = (cc.random0To1() + 1.0) * 0.5 * this.originalSpriteWidth;\n        this.currentSpriteScale = cc.randomMinus1To1() * 0.5 +  1;\n        for (const sprite of this.sprites) {\n            sprite.node.setScale(this.currentSpriteScale,this.currentSpriteScale);\n        }\n    }\n\n    AddElectricNode(p: cc.Vec2, r: number = 10 ): ElectricNode {\n        let eNode = new ElectricNode();\n        eNode.init(p, r, this.speedFactor);\n        eNode.belongToFlow = this;\n        this.eNodes.push(eNode);\n\n        // fill in sprites if this added ElectricNode is NOT the first one in the flow\n        if (this.eNodes.length>1) {\n            for (let i = 0; i<this.segments; i++) {\n                let particle = new cc.Node();\n                let sprite = particle.addComponent(cc.Sprite);\n                sprite.spriteFrame = this.Texture;\n                sprite.dstBlendFactor = 1;//cc.BlendFactor.DST_ALPHA ;\n                particle.setScale(this.currentSpriteScale, this.currentSpriteScale);\n                this.ContainerNode.addChild(particle);\n                this.sprites.push(sprite);\n            }    \n        }\n\n        return eNode;\n    }\n\n    AddExistingElectricNode(existingNode: ElectricNode){\n        this.eNodes.push(existingNode);\n\n        // fill in sprites if this added ElectricNode is NOT the first one in the flow\n        if (this.eNodes.length>1) {\n            for (let i = 0; i<this.segments; i++) {\n                let particle = new cc.Node();\n                let sprite = particle.addComponent(cc.Sprite);\n                sprite.spriteFrame = this.Texture;\n                sprite.dstBlendFactor = 1;//cc.BlendFactor.DST_ALPHA ;\n                particle.setScale(this.currentSpriteScale, this.currentSpriteScale);\n                this.ContainerNode.addChild(particle);\n                this.sprites.push(sprite);\n            }    \n        }\n    }\n\n    Clear(){\n        this.eNodes.splice(0, this.eNodes.length);\n        this.sprites.splice(0, this.sprites.length);\n        this.ContainerNode.removeAllChildren();\n    }\n\n    //#region Curve\n\n    catmullRom(t:number, P0:number, P1:number, P2:number, P3:number){\n        return 0.5 * ((2 * P1) + \n               (-P0 + P2) * t +\n               (2*P0 - 5*P1 + 4*P2 - P3) * Math.pow(t, 2) +\n               (-P0 + 3*P1- 3*P2 + P3) * Math.pow(t, 3));\n    }\n\n    drawCatmullRomCurve(){\n        if (this.eNodes.length == 0) {\n            return;\n        }\n        \n        let p0 = this.eNodes[0].position;\n        let p1 = this.eNodes[0].position;\n        let p2 = this.eNodes[0].position;\n        let p3 = this.eNodes[0].position;\n        \n        let controlPointsCount = this.eNodes.length;\n        let step = 1.0 / this.segments;\n        \n        for (let i = 2; i < controlPointsCount + 1; i++)\n        {\n            let idx = i >= controlPointsCount ? controlPointsCount - 1 : i;\n            p0 = this.eNodes[idx].position;\n            \n            if (i >= 1)\n            {\n                idx = (i - 1) >= controlPointsCount ? controlPointsCount - 1 : (i - 1);\n                p1 = this.eNodes[idx].position;\n            }\n            \n            if (i >= 2)\n            {\n                idx = (i - 2) >= controlPointsCount ? controlPointsCount - 1 : (i - 2);\n                p2 = this.eNodes[idx].position;\n            }\n            if (i >= 3)\n            {\n                idx = (i - 3) >= controlPointsCount ? controlPointsCount - 1 : (i - 3);\n                p3 = this.eNodes[idx].position;\n            }\n            \n            let amount = 0.0;\n            let randomOpacity = cc.random0To1() * 128 + 128;\n            for (let j = 0; j < this.segments; j++)\n            {\n                let pointX = this.catmullRom(amount, p0.x, p1.x, p2.x, p3.x);\n                let pointY = this.catmullRom(amount, p0.y, p1.y, p2.y, p3.y);\n                let sprite = this.sprites[(i - 2) * this.segments + j];\n                sprite.node.setPosition(pointX,pointY);\n                sprite.node.opacity = randomOpacity;\n                amount += step;\n            }\n        }\n    }\n\n    //#endregion\n\n    \n\n\n\n\n}\n"]}