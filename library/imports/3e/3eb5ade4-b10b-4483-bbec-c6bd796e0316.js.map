{"version":3,"sources":["../../../../assets/Script/assets/Script/CellController.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../assets/Script","sourcesContent":["import GameBoardController from \"./GameBoardController\";\nimport * as Enums from \"./Enums\";\nimport * as Global from \"./Global\";\nimport MonsterController from \"./MonsterController\";\nimport ElectricFlow from \"./ElectricEffect/ElectricFlow\";\nimport GiftController from \"./GiftController\";\nimport ElectricEffect from \"./ElectricEffect/ElectricEffect\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class CellController extends cc.Component {\n\n    //#region Properties\n\n    @property(cc.Sprite)\n    CellColor: cc.Sprite = null;\n\n    @property(cc.Sprite)\n    CellBody: cc.Sprite = null;\n\n    @property(cc.Sprite)\n    CellHint: cc.Sprite = null;\n\n    @property(cc.SpriteFrame)\n    X_Texture: cc.SpriteFrame = null;\n    @property(cc.SpriteFrame)\n    X_Hint_Texture: cc.SpriteFrame = null;\n    @property(cc.SpriteFrame)\n    T_Texture: cc.SpriteFrame = null;\n    @property(cc.SpriteFrame)\n    T_Hint_Texture: cc.SpriteFrame = null;\n    @property(cc.SpriteFrame)\n    L_Texture: cc.SpriteFrame = null;\n    @property(cc.SpriteFrame)\n    L_Hint_Texture: cc.SpriteFrame = null;\n    @property(cc.SpriteFrame)\n    I_Texture: cc.SpriteFrame = null;\n    @property(cc.SpriteFrame)\n    I_Hint_Texture: cc.SpriteFrame = null;\n    @property(cc.SpriteFrame)\n    H_Texture: cc.SpriteFrame = null;\n    @property(cc.SpriteFrame)\n    H_Hint_Texture: cc.SpriteFrame = null;\n\n    // @property({type: cc.Enum(Enums.CellState)})\n    _CellState: Enums.CellState = Enums.CellState.Normal;\n    get CellState() {\n        return this._CellState;\n    }\n    set CellState(state: Enums.CellState) {\n        this._CellState = state;\n        this.setColor(state);\n    }\n\n    CellType: Enums.CellType = Enums.CellType.Cross;\n    \n    gameBoard: GameBoardController = null;\n\n    isBusy = false;\n    rotateMinScale = 0.35;\n    // CELL_PRESSED_SCALE = 0.9;\n    targetAngle = 0;\n    backupAngle = 0;\n    currentColor = 0;// state: 0-white, 1-blue, 2-yellow, 3-green, 4-black\n\n    Board_X = 0;\n    Board_Y = 0;\n\n    RotationQuarterCount = 0;\n\n    _WhereItShouldBe: cc.Vec2 = new cc.Vec2(0,0);\n    get WhereItShouldBe() {\n        this._WhereItShouldBe.x = this.Board_X * this.node.width + Global.BOARD_OFFSET_X;\n        this._WhereItShouldBe.y = this.Board_Y * this.node.height + Global.BOARD_OFFSET_Y;\n        return this._WhereItShouldBe;\n    }\n\n    //#endregion\n\n    //#region Lifecycle\n\n    onLoad () {\n        this.registerTouchEvent();\n        this.gameBoard = cc.find(\"Canvas\").getComponent(GameBoardController);\n    }\n\n    update (dt) {\n        if (this.longpressCounting) {\n            this.longpressTimespan += dt;\n            if (this.longpressTimespan >= Global.GIFT_LONGPRESS_DURATION\n                && this.longpressLevel == 1) {\n                this.longPressed(2);\n            }\n            else if(this.longpressTimespan >= Global.GIFT_LONGPRESS_THESHOLD\n                    && this.longpressLevel == 0) {\n                this.longPressed(1);                    \n            }\n        }\n    }\n\n    //#endregion\n\n    //#region initialization\n\n    initCell(cellType: Enums.CellType, rotation: number, board_x: number, board_y:number){\n\n        this.CellType = cellType;\n\n        this.Board_X = board_x;\n        this.Board_Y = board_y;\n\n        /* it is very important to reset the RotationQuarterCount to zero,\n        because when the cell is reused, it may come with legacy value */\n        this.RotationQuarterCount = 0;\n        this.node.rotation = rotation * -90;\n        this.RotateAntennas(rotation);\n\n        /* these values may stay affected from previous touch which happened right before burn */\n        this.node.scale = 1;\n        this.CellHint.node.opacity = 0;\n        if (this.gameBoard.CurrentlyTouchedCell == this) {\n            this.gameBoard.CurrentlyTouchedCell = null;\n        }\n\n        switch (cellType) {\n            case Enums.CellType.Cross:\n                this.CellBody.spriteFrame = this.X_Texture;\n                this.CellHint.spriteFrame = this.X_Hint_Texture;\n                break;\n            case Enums.CellType.T:\n                this.CellBody.spriteFrame = this.T_Texture;\n                this.CellHint.spriteFrame = this.T_Hint_Texture;                \n                break;\n            case Enums.CellType.L:\n                this.CellBody.spriteFrame = this.L_Texture;\n                this.CellHint.spriteFrame = this.L_Hint_Texture;\n                break;\n            case Enums.CellType.I:\n                this.CellBody.spriteFrame = this.I_Texture;\n                this.CellHint.spriteFrame = this.I_Hint_Texture;\n                break;\n            case Enums.CellType.Half:\n                this.CellBody.spriteFrame = this.H_Texture;\n                this.CellHint.spriteFrame = this.H_Hint_Texture;\n                break;\n            default:\n                break;\n        }\n    }\n    //#endregion\n\n    //#region Touch Event\n    \n    registerTouchEvent(){\n\n        this.node.on(cc.Node.EventType.TOUCH_START, \n            (e)=>{\n                if ( (this.gameBoard.CurrentGameState == Enums.GameState.Hint && this.gameBoard.circuitTree.indexOf(this) >= 0 ) \n                    || this.gameBoard.CurrentGameState == Enums.GameState.Idle ) {\n                    \n                    if (this.gameBoard.CurrentlyTouchedCell != null) {\n                        return;\n                    }\n    \n                    if (this.isBusy) {\n                        return;\n                    }\n    \n                    this.gameBoard.CurrentlyTouchedCell = this;\n                    \n                    this.longPressStart();\n                }\n            }, this);\n        \n        this.node.on(cc.Node.EventType.TOUCH_END,\n            (e)=>{\n                if (this.gameBoard.CurrentGameState == Enums.GameState.Burning)\n                {\n                    return;\n                }\n\n                if (this.gameBoard.CurrentlyTouchedCell != this) {\n                    return;\n                }\n\n                if (this.isBusy) {\n                    return;\n                }\n\n                this.longPressCancel();\n                /* longpressLevel greater than zero, meaning this round of touch \n                should be considered as a LongPress, rather than a Tap */\n                if (this.longpressLevel > 0) {\n                    this.gameBoard.CurrentlyTouchedCell = null; \n                    return;\n                }\n                \n                if (this.AttachedMonster != null) {\n                    this.AttachedMonster.GetAngry();\n                    this.gameBoard.CurrentlyTouchedCell = null;\n                }\n                else{\n                    this.Rotate();\n                }\n\n            }, this);\n        \n        this.node.on(cc.Node.EventType.TOUCH_CANCEL, \n            (e)=>{\n                if (this.gameBoard.CurrentlyTouchedCell != this) {\n                    return;\n                }\n\n                if (this.isBusy) {\n                    return;\n                }\n\n                this.longPressCancel();\n\n                this.gameBoard.CurrentlyTouchedCell = null;\n                this.isBusy = false;\n            }, this);\n    }\n\n    //#endregion\n\n    //#region Rotation\n\n    Rotate(){\n        this.isBusy = true;\n        this.CellState = Enums.CellState.Normal;\n\n        this.gameBoard.UpdateBoard(this);\n\n        this.node.runAction(cc.rotateBy(Global.CELL_ROTATE_DURATION * 0.5, -90));\n        this.node.runAction(cc.sequence(\n            cc.scaleTo(Global.CELL_ROTATE_DURATION * 0.5, this.rotateMinScale, this.rotateMinScale),\n            cc.scaleTo(Global.CELL_ROTATE_DURATION * 0.5, 1, 1),\n            cc.callFunc(()=>{\n                this.RotateAntennas();\n                this.isBusy = false;\n                this.gameBoard.CurrentlyTouchedCell = null;\n                this.gameBoard.UpdateBoard();\n                this.gameBoard.spark(this);\n            },this)\n        ));\n    }\n\n    RotateAntennas(quarters = 1)\n    {\n        this.RotationQuarterCount += quarters;\n        this.RotationQuarterCount = this.RotationQuarterCount % 4;\n\n        switch (this.CellType)\n        {\n            case Enums.CellType.I:\n                if (this.RotationQuarterCount == 0 || this.RotationQuarterCount == 2)\n                {\n                    this.TopAntenna = this.BottomAntenna = true;\n                    this.LeftAntenna = this.RightAntenna = false;\n                }\n                else if (this.RotationQuarterCount == 1 || this.RotationQuarterCount == 3)\n                {\n                    this.TopAntenna = this.BottomAntenna = false;\n                    this.LeftAntenna = this.RightAntenna = true;\n                }\n                break;\n            case Enums.CellType.L:\n                if (this.RotationQuarterCount == 0)\n                {\n                    this.TopAntenna = this.RightAntenna = true;\n                    this.BottomAntenna = this.LeftAntenna = false;\n                }\n                else if (this.RotationQuarterCount == 1)\n                {\n                    this.TopAntenna = this.LeftAntenna = true;\n                    this.BottomAntenna = this.RightAntenna = false;\n                }\n                else if (this.RotationQuarterCount == 2)\n                {\n                    this.TopAntenna = this.RightAntenna = false;\n                    this.BottomAntenna = this.LeftAntenna = true;\n                }\n                else if (this.RotationQuarterCount == 3)\n                {\n                    this.TopAntenna = this.LeftAntenna = false;\n                    this.BottomAntenna = this.RightAntenna = true;\n                }\n                break;\n            case Enums.CellType.T:\n                if (this.RotationQuarterCount == 0)\n                {\n                    this.LeftAntenna = this.RightAntenna = this.BottomAntenna = true;\n                    this.TopAntenna = false;\n                }\n                else if (this.RotationQuarterCount == 1)\n                {\n                    this.TopAntenna = this.RightAntenna = this.BottomAntenna = true;\n                    this.LeftAntenna = false;\n                }\n                else if (this.RotationQuarterCount == 2)\n                {\n                    this.LeftAntenna = this.RightAntenna = this.TopAntenna = true;\n                    this.BottomAntenna = false;\n                }\n                else if (this.RotationQuarterCount == 3)\n                {\n                    this.LeftAntenna = this.TopAntenna = this.BottomAntenna = true;\n                    this.RightAntenna = false;\n                }\n                break;\n            case Enums.CellType.Cross:\n                this.LeftAntenna = this.RightAntenna = this.TopAntenna = this.BottomAntenna = true;\n                break;\n            case Enums.CellType.Half:\n                if (this.RotationQuarterCount == 0)\n                {\n                    this.RightAntenna = this.TopAntenna = this.LeftAntenna = false;\n                    this.BottomAntenna = true;\n                }\n                else if (this.RotationQuarterCount == 1)\n                {\n                    this.TopAntenna = this.LeftAntenna = this.BottomAntenna = false;\n                    this.RightAntenna = true;\n                }\n                else if (this.RotationQuarterCount == 2)\n                {\n                    this.LeftAntenna = this.BottomAntenna = this.RightAntenna = false;\n                    this.TopAntenna = true;\n                }\n                else if (this.RotationQuarterCount == 3)\n                {\n                    this.BottomAntenna = this.RightAntenna = this.TopAntenna = false;\n                    this.LeftAntenna = true;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    //#endregion\n\n    //#region Movement\n\n    GetReadyForShow(){\n        this.node.setPosition(this.Board_X * this.node.width + Global.BOARD_OFFSET_X, \n                              this.node.height * Global.BOARD_ROW_COUNT + Global.STARTING_LINE_OFFSET);\n        this.CellState = Enums.CellState.Normal;\n    }\n\n    MoveToWhereItShouldBe(selector: Function){\n        this.node.runAction(\n            cc.sequence(\n                cc.moveTo(Global.CELL_DROP_DURATION, this.WhereItShouldBe),\n                cc.callFunc(selector, this)\n            )\n        );\n\n        if (this.AttachedMonster != null)\n                {\n                    /*tag bug's dropping status*/\n                    this.AttachedMonster.ShouldMoveAround = false;\n                    this.AttachedMonster.node.runAction(cc.moveTo(Global.CELL_DROP_DURATION, this.WhereItShouldBe));\n                }\n\n        if (this.AttachedGift != null)\n        {\n            this.AttachedGift.node.runAction(cc.moveTo(Global.CELL_DROP_DURATION, this.WhereItShouldBe));\n        }\n\n    }\n\n    //#endregion\n\n    //#region Connection\n\n    TopAntenna = false;\n    BottomAntenna = false;\n    LeftAntenna = false;\n    RightAntenna = false;\n\n    TopConnectedCell: CellController = null;\n    LeftConnectedCell: CellController = null;\n    BottomConnectedCell: CellController = null;\n    RightConnectedCell: CellController = null;\n\n    GetConnections() : Array<CellController>\n    {\n        this.TopConnectedCell = null;\n        this.LeftConnectedCell = null;\n        this.BottomConnectedCell = null;\n        this.RightConnectedCell = null;\n\n        let connections = new Array<CellController>();\n        if (this.TopAntenna && this.Board_Y < (Global.BOARD_ROW_COUNT - 1))\n        {\n            let topCell = this.gameBoard.cellMatrix[this.Board_Y + 1][this.Board_X];\n            if (topCell != null && topCell.BottomAntenna) //|| topCell.CellType == Enums.CellType.Unknown))\n            {\n                connections.push(topCell);\n                this.TopConnectedCell = topCell;\n            }\n        }\n\n        if (this.LeftAntenna && this.Board_X > 0)\n        {\n            let leftCell = this.gameBoard.cellMatrix[this.Board_Y][this.Board_X - 1];\n            if (leftCell != null && leftCell.RightAntenna) //|| leftCell.CellType == Enums.CellType.Unknown))\n            {\n                connections.push(leftCell);\n                this.LeftConnectedCell = leftCell;\n            }\n        }\n\n        if (this.BottomAntenna && this.Board_Y > 0)\n        {\n            let bottomCell = this.gameBoard.cellMatrix[this.Board_Y - 1][this.Board_X];\n            if (bottomCell != null && bottomCell.TopAntenna) //|| bottomCell.CellType == Enums.CellType.Unknown))\n            {\n                connections.push(bottomCell);\n                this.BottomConnectedCell = bottomCell;\n            }\n        }\n\n        if (this.RightAntenna && this.Board_X < (Global.BOARD_COLUMN_COUNT - 1))\n        {\n            let rightCell = this.gameBoard.cellMatrix[this.Board_Y][this.Board_X + 1];\n            if (rightCell != null && rightCell.LeftAntenna) //|| rightCell.CellType == Enums.CellType.Unknown))\n            {\n                connections.push(rightCell);\n                this.RightConnectedCell = rightCell;\n            }\n        }\n\n        return connections;\n    }\n\n    //#endregion\n\n    //#region Cell State\n\n    SetState(leftBorderDetected : boolean, rightBorderDetected : boolean){\n        let state = Enums.CellState.Normal;\n        if (!leftBorderDetected && !rightBorderDetected)\n        {\n            state = Enums.CellState.Normal;\n        }\n        else if (leftBorderDetected && !rightBorderDetected)\n        {\n            state = Enums.CellState.LeftBorderConnected;\n        }\n        else if (!leftBorderDetected && rightBorderDetected)\n        {\n            state = Enums.CellState.RightBorderConnected;\n        }\n        else if (leftBorderDetected && rightBorderDetected)\n        {\n            state = Enums.CellState.Hint;\n        }\n\n        this.CellState = state;\n    }\n\n    setColor(state: Enums.CellState){\n        switch (state) {\n            case Enums.CellState.Normal:\n                this.CellColor.node.color = cc.color(204, 204, 204);\n                break;\n            case Enums.CellState.LeftBorderConnected:\n                this.CellColor.node.color = cc.color(147, 205, 221);\n                break;\n            case Enums.CellState.RightBorderConnected:\n                this.CellColor.node.color = cc.color(234, 200, 93);            \n                break;\n            case Enums.CellState.Hint:\n                this.CellColor.node.color = cc.color(184, 203, 145); \n                break;\n            case Enums.CellState.Burnt:\n                this.CellColor.node.color = cc.color(64, 64, 64); \n                break;\n            default:\n                break;\n        }\n    }\n\n    hintAction: cc.Action = null;\n    ShowHint(){\n        this.hintAction = this.CellHint.node.runAction(\n            cc.sequence(\n                cc.fadeIn(Global.CIRCUIT_HINT_DURATION * 0.3),\n                cc.fadeOut(Global.CIRCUIT_HINT_DURATION * 0.7)\n            )\n        );\n        // this.hintAction = this.CellHint.node.runAction(cc.fadeIn(Global.CIRCUIT_HINT_DURATION * 1));\n        // this.CellHint.node.opacity = 255;\n    }\n\n    AbortHint(){\n        if (this.hintAction != null) {\n            this.CellHint.node.stopAction(this.hintAction);\n            this.CellHint.node.opacity = 0;\n        }\n    }\n\n    //#endregion\n\n    //#region Monster\n\n    AttachedMonster: MonsterController = null;\n\n    //#endregion\n\n    //#region Gift\n\n    AttachedGift: GiftController = null;\n\n    Bomb(){\n        this.CellState = Enums.CellState.Burnt;\n\n        //process attachments\n        if (this.AttachedGift != null)\n        {\n            this.AttachedGift.Burn();\n        }\n        if (this.AttachedMonster != null)\n        {\n            this.AttachedMonster.Shock();\n        }\n    }\n\n    GetBombed() : boolean {\n        let toRemove = true;\n\n        if (this.AttachedGift != null) {\n            if (this.AttachedGift.BombTriggered) {\n                if (this.AttachedGift == this.gameBoard.ExplodingBomb) {\n                    this.AttachedGift.Remove();\n                    this.gameBoard.ExplodingBomb = null;\n                }\n                else{\n                    toRemove = false;\n                }\n            }\n        }\n\n        if (this.AttachedMonster != null)\n        {\n            /* no matter how strong the enemy is, kill it! */\n            this.AttachedMonster.Die();\n        }\n\n        return toRemove;\n    }\n\n    //#endregion\n\n    //#region Burn\n\n    electricEffect: ElectricEffect = null;\n    flowAtTop: ElectricFlow = null;\n    flowAtBottom: ElectricFlow = null;\n    flowAtLeft: ElectricFlow = null;\n    flowAtRight: ElectricFlow = null;\n\n    Burn(EE: ElectricEffect, burningFrom: Enums.Direction, sourceFlow: ElectricFlow)\n    {\n        if (this.CellState == Enums.CellState.Burnt) {\n            return;\n        }\n        \n        this.CellState = Enums.CellState.Burnt;\n        this.flowAtTop = this.flowAtBottom = this.flowAtLeft = this.flowAtRight = null;\n        this.electricEffect = EE;\n        let neighbours = this.GetConnections();\n\n        //process attachments\n        if (this.AttachedGift != null)\n        {\n            this.AttachedGift.Burn();\n        }\n        if (this.AttachedMonster != null)\n        {\n            this.AttachedMonster.Shock();\n        }\n\n        //add electric effect\n        if (sourceFlow == null)\n        {\n            sourceFlow = this.electricEffect.AddFlow();\n            //flow starts from left by default\n            sourceFlow.AddElectricNode(new cc.Vec2(this.node.position.x - this.node.width * 0.5, this.node.position.y), 0);\n        }\n\n        //add a node at center point \n        let centerENode = sourceFlow.AddElectricNode(this.node.position, Global.ELECTRIC_NODE_RADIUS);\n\n        if (this.RightAntenna && burningFrom != Enums.Direction.Right)\n        {\n            let radius = this.Board_X == (Global.BOARD_COLUMN_COUNT - 1) ? 0 : Global.ELECTRIC_NODE_RADIUS;\n            if (this.Board_X == Global.BOARD_COLUMN_COUNT - 1) {\n                radius = 0;\n            }\n            else{\n                radius = this.RightConnectedCell == null ? 0 : Global.ELECTRIC_NODE_RADIUS;\n            }\n\n            sourceFlow.AddElectricNode(new cc.Vec2(this.node.position.x + this.node.width / 2, this.node.position.y), radius);\n            this.flowAtRight = sourceFlow;\n            sourceFlow = null;\n        }\n\n        if (this.TopAntenna && burningFrom != Enums.Direction.Top)\n        {\n            if (sourceFlow == null)\n            {\n                sourceFlow = this.electricEffect.AddFlow(centerENode);\n                // sourceFlow.AddElectricNode(new cc.Vec2(this.node.position.x, this.node.position.y), Global.ELECTRIC_NODE_RADIUS);\n            }\n            let radius = this.TopConnectedCell == null ? 0 : Global.ELECTRIC_NODE_RADIUS;\n            sourceFlow.AddElectricNode(new cc.Vec2(this.node.position.x, this.node.position.y + this.node.height / 2), radius);\n            this.flowAtTop = sourceFlow;\n            sourceFlow = null;\n        }\n\n        if (this.BottomAntenna && burningFrom != Enums.Direction.Bottom)\n        {\n            if (sourceFlow == null)\n            {\n                sourceFlow = this.electricEffect.AddFlow(centerENode);\n                // sourceFlow.AddElectricNode(new cc.Vec2(this.node.position.x, this.node.position.y), Global.ELECTRIC_NODE_RADIUS);\n            }\n            let radius = this.BottomConnectedCell == null ? 0 : Global.ELECTRIC_NODE_RADIUS;\n            sourceFlow.AddElectricNode(new cc.Vec2(this.node.position.x, this.node.position.y - this.node.height / 2), radius);\n            this.flowAtBottom = sourceFlow;\n            sourceFlow = null;\n        }\n\n        if (this.LeftAntenna && burningFrom != Enums.Direction.Left)\n        {\n            if (sourceFlow == null)\n            {\n                sourceFlow = this.electricEffect.AddFlow(centerENode);\n                // sourceFlow.AddElectricNode(new cc.Vec2(this.node.position.x, this.node.position.y), Global.ELECTRIC_NODE_RADIUS);\n            }\n            let radius = this.LeftConnectedCell == null ? 0 : Global.ELECTRIC_NODE_RADIUS;\n            sourceFlow.AddElectricNode(new cc.Vec2(this.node.position.x - this.node.width / 2, this.node.position.y), radius);\n            this.flowAtLeft = sourceFlow;\n            sourceFlow = null;\n        }\n\n        // burn neighbours\n        for (let cell of neighbours)\n        {\n            let passingInFlow = null;\n            let fromWhichSide = Enums.Direction.Top;\n            if (cell == this.TopConnectedCell && burningFrom != Enums.Direction.Top)\n            {\n                fromWhichSide = Enums.Direction.Bottom;\n                passingInFlow = this.flowAtTop;\n            }\n            else if (cell == this.LeftConnectedCell && burningFrom != Enums.Direction.Left)\n            {\n                fromWhichSide = Enums.Direction.Right;\n                passingInFlow = this.flowAtLeft;\n            }\n            else if (cell == this.BottomConnectedCell && burningFrom != Enums.Direction.Bottom)\n            {\n                fromWhichSide = Enums.Direction.Top;\n                passingInFlow = this.flowAtBottom;\n            }\n            else if (cell == this.RightConnectedCell && burningFrom != Enums.Direction.Right)\n            {\n                fromWhichSide = Enums.Direction.Left;\n                passingInFlow = this.flowAtRight;\n            }\n\n            cell.Burn(EE, fromWhichSide, passingInFlow);\n        }\n    }\n\n    GetBurnt() : boolean {\n        let toRemove = true;\n\n        /* Let's delay this cell's removal to the bomb explosion. */\n        if (this.AttachedGift!=null && this.AttachedGift.GiftType == Enums.GiftType.Bomb){\n            toRemove = false;\n            this.CellState = Enums.CellState.Burnt;\n        }\n\n        if (this.AttachedMonster != null)\n        {\n            let dead = this.AttachedMonster.Wound();\n            if (dead == false) {\n                toRemove = false;\n                this.CellState = Enums.CellState.Normal;\n            }\n        }\n\n        return toRemove;\n    }\n\n    //#endregion\n\n    //#endregion Long Press\n\n    longpressCounting:boolean = false;\n    longpressTimespan:number = 0;\n    longpressLevel = 0;\n    longPressStart(){\n        this.longpressLevel = 0;        \n        this.longpressTimespan = 0;\n        this.longpressCounting = true;\n    }\n\n    longPressed(level:number){\n        this.longpressLevel = level;\n\n        if (level == 1) {\n            if (this.AttachedGift!=null) {\n                this.AttachedGift.ShowLongPressHint();\n            }\n        }\n        else if (level == 2) {\n            if (this.AttachedGift != null) {\n                this.AttachedGift.LongPressFire();            \n            }\n        }\n    }\n\n    longPressCancel(){\n        this.longpressCounting = false;\n\n        if (this.AttachedGift != null) {\n            this.AttachedGift.StopLongPressHint();\n        }\n    }\n\n    //#endregion\n}\n\n\n"]}